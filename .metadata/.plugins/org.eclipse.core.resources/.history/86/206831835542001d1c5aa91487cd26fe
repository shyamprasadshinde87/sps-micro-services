package com.sp.employee.Controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.sp.employee.exception.EmployeeNotFoundException;
import com.sp.employee.model.EmployeeModel;
import com.sp.employee.repository.EmployeeRepository;

@RestController
@RequestMapping("/admin")
public class EmployeeController {

	private final Logger LOGGER = LoggerFactory.getLogger(this.getClass());

	@Autowired
	private EmployeeRepository employeeRepository;

	@GetMapping("/employees")
	public List<EmployeeModel> getEmployeeModels() {
		LOGGER.info("insidee create employe getmapping");

		return employeeRepository.findAll();
	}

	@GetMapping("/employees/{id}")
	public EmployeeModel getEmployeeModelById(@PathVariable(value = "id") Long employeeId) {
		EmployeeModel employeeModel = employeeRepository.findById(employeeId)
				.orElseThrow(() -> new EmployeeNotFoundException("Employee not found for this id :: " + employeeId));
		LOGGER.info("insidee create employe getmapping{}" + employeeId);

		return employeeModel;
	}

	@PostMapping("/employees")
	public EmployeeModel createEmployeeModel(@Valid @RequestBody EmployeeModel employeeModel) {
		LOGGER.info("insidee create employe postmapping{}" + employeeModel);

		return employeeRepository.save(employeeModel);
	}

	@PutMapping("/employees/{id}")
	public EmployeeModel updateEmployeeModel(@PathVariable(value = "id") Long employeeId,

			@Valid @RequestBody EmployeeModel input) {
		EmployeeModel employeeModel = employeeRepository.findById(employeeId)
				.orElseThrow(() -> new EmployeeNotFoundException("Employee not found for this id :: " + employeeId));
		employeeModel.setFirstName(input.getFirstName());
		employeeModel.setLastName(input.getLastName());
		employeeModel.setEmployeeNumber(input.getEmployeeNumber());
		LOGGER.info("insidee create employe putmapping {} and {}", employeeModel, employeeId);
		return employeeRepository.save(employeeModel);
	}

	@DeleteMapping("/employees/{id}")
	public Map<String, Boolean> deleteEmployee(@PathVariable(value = "id") Long employeeId) {
		EmployeeModel employeeModel = employeeRepository.findById(employeeId)
				.orElseThrow(() -> new EmployeeNotFoundException("Employee not found for this id :: " + employeeId));

		employeeRepository.delete(employeeModel);
		Map<String, Boolean> response = new HashMap<>();
		response.put("deleted", Boolean.TRUE);
		LOGGER.info("insidee create employe deletemapping" + response);

		return response;

	}

//	@GetMapping("/employees/byfirstname")
//	public List<EmployeeModel> getEmployeeModelByFirstName(@PathVariable(value = "firstName") String FirstName) {
//		List<EmployeeModel> employeeModelByFirstName = employeeRepository.findByFirstName(FirstName);
//
//		LOGGER.info("insidee create employe getmapping{}" + FirstName);
//
//		return employeeModelByFirstName;
//	}
//
//	@GetMapping("/employees/bylastname")
//	public List<EmployeeModel> getEmployeeModelByLastName(@PathVariable(value = "lastName") String LastName) {
//		List<EmployeeModel> employeeModelByLastName = employeeRepository.findByLastName(LastName);
//
//		LOGGER.info("insidee create employe getmapping{}" + LastName);
//
//		return employeeModelByLastName;
//	}

}
